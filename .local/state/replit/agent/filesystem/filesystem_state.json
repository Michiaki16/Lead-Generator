{"file_contents":{"README.md":{"content":"# Lead-Generator","size_bytes":16},"database.js":{"content":"\nconst sqlite3 = require('sqlite3').verbose();\nconst path = require('path');\nconst { app } = require('electron');\n\nclass EmailDatabase {\n  constructor() {\n    this.db = null;\n    this.initDatabase();\n  }\n\n  initDatabase() {\n    const dbPath = path.join(app.getPath('userData'), 'email_history.db');\n    this.db = new sqlite3.Database(dbPath, (err) => {\n      if (err) {\n        console.error('Error opening database:', err);\n      } else {\n        console.log('Connected to SQLite database');\n        this.createTable();\n      }\n    });\n  }\n\n  createTable() {\n    const createTableQuery = `\n      CREATE TABLE IF NOT EXISTS sent_emails (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        company_name TEXT NOT NULL,\n        email_address TEXT NOT NULL,\n        phone_number TEXT,\n        company_address TEXT,\n        business_website TEXT,\n        email_subject TEXT,\n        sent_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n        UNIQUE(email_address)\n      )\n    `;\n\n    this.db.run(createTableQuery, (err) => {\n      if (err) {\n        console.error('Error creating table:', err);\n      } else {\n        console.log('Email history table ready');\n      }\n    });\n  }\n\n  addSentEmail(emailData) {\n    return new Promise((resolve, reject) => {\n      const insertQuery = `\n        INSERT OR REPLACE INTO sent_emails \n        (company_name, email_address, phone_number, company_address, business_website, email_subject)\n        VALUES (?, ?, ?, ?, ?, ?)\n      `;\n\n      this.db.run(insertQuery, [\n        emailData.companyName,\n        emailData.email,\n        emailData.phone,\n        emailData.address,\n        emailData.website,\n        emailData.subject\n      ], function(err) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(this.lastID);\n        }\n      });\n    });\n  }\n\n  getAllSentEmails() {\n    return new Promise((resolve, reject) => {\n      const selectQuery = `\n        SELECT * FROM sent_emails \n        ORDER BY sent_date DESC\n      `;\n\n      this.db.all(selectQuery, [], (err, rows) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(rows);\n        }\n      });\n    });\n  }\n\n  checkIfEmailSent(emailAddress) {\n    return new Promise((resolve, reject) => {\n      const checkQuery = `\n        SELECT COUNT(*) as count FROM sent_emails \n        WHERE email_address = ?\n      `;\n\n      this.db.get(checkQuery, [emailAddress], (err, row) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(row.count > 0);\n        }\n      });\n    });\n  }\n\n  deleteEmailRecord(id) {\n    return new Promise((resolve, reject) => {\n      const deleteQuery = `DELETE FROM sent_emails WHERE id = ?`;\n\n      this.db.run(deleteQuery, [id], function(err) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(this.changes);\n        }\n      });\n    });\n  }\n\n  clearAllEmails() {\n    return new Promise((resolve, reject) => {\n      const clearQuery = `DELETE FROM sent_emails`;\n\n      this.db.run(clearQuery, function(err) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(this.changes);\n        }\n      });\n    });\n  }\n\n  close() {\n    if (this.db) {\n      this.db.close((err) => {\n        if (err) {\n          console.error('Error closing database:', err);\n        } else {\n          console.log('Database connection closed');\n        }\n      });\n    }\n  }\n}\n\nmodule.exports = EmailDatabase;\n","size_bytes":3422},"email-enhancement.js":{"content":"// Enhanced email extraction utility functions\nconst emailUtils = {\n  // Comprehensive email regex patterns\n  emailPatterns: [\n    // Standard email format\n    /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g,\n    \n    // Obfuscated emails with [at] and [dot]\n    /[a-zA-Z0-9._%+-]+\\s?\\[at\\]\\s?[a-zA-Z0-9.-]+\\s?\\[dot\\]\\s?[a-zA-Z]{2,}/g,\n    \n    // Emails with \"at\" and \"dot\" words\n    /[a-zA-Z0-9._%+-]+\\s+at\\s+[a-zA-Z0-9.-]+\\s+dot\\s+[a-zA-Z]{2,}/g,\n    \n    // Emails with HTML entities\n    /[a-zA-Z0-9._%+-]+&#64;[a-zA-Z0-9.-]+&#46;[a-zA-Z]{2,}/g,\n    \n    // JavaScript obfuscated emails\n    /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g\n  ],\n\n  // Enhanced email validation\n  validateEmail: (email) => {\n    const cleanEmail = email.toLowerCase().trim();\n    \n    // Basic format check\n    if (!cleanEmail.includes('@') || !cleanEmail.includes('.')) return false;\n    if (cleanEmail.length < 5 || cleanEmail.length > 254) return false;\n    \n    // Invalid patterns to exclude\n    const invalidPatterns = [\n      'noreply', 'no-reply', 'donotreply', 'do-not-reply',\n      'example.com', 'test@', 'sample@', 'placeholder',\n      'your-email', 'youremail', 'email@domain', 'name@domain',\n      'user@example', 'admin@localhost', 'test@test',\n      '@example.', '@test.', '@demo.', '@sample.',\n      'webmaster@', 'postmaster@', 'mailer-daemon@'\n    ];\n    \n    // Business-like patterns to prioritize\n    const businessPatterns = [\n      'info@', 'contact@', 'hello@', 'support@', \n      'sales@', 'inquiry@', 'business@', 'office@',\n      'admin@', 'manager@', 'director@', 'ceo@',\n      'owner@', 'team@'\n    ];\n    \n    // Check for invalid patterns\n    for (const pattern of invalidPatterns) {\n      if (cleanEmail.includes(pattern)) return false;\n    }\n    \n    // Assign priority score\n    let priority = 1;\n    for (const pattern of businessPatterns) {\n      if (cleanEmail.includes(pattern)) {\n        priority = 3;\n        break;\n      }\n    }\n    \n    return { isValid: true, priority, email: cleanEmail };\n  },\n\n  // Clean and normalize email addresses\n  normalizeEmail: (email) => {\n    return email\n      .replace(/\\[at\\]/gi, '@')\n      .replace(/\\[dot\\]/gi, '.')\n      .replace(/\\sat\\s/gi, '@')\n      .replace(/\\sdot\\s/gi, '.')\n      .replace(/&#64;/g, '@')\n      .replace(/&#46;/g, '.')\n      .toLowerCase()\n      .trim();\n  }\n};\n\nmodule.exports = emailUtils;","size_bytes":2381},"googleMaps.js":{"content":"\nconst puppeteerExtra = require(\"puppeteer-extra\");\nconst StealthPlugin = require(\"puppeteer-extra-plugin-stealth\");\nconst cheerio = require(\"cheerio\");\nconst chromeLauncher = require(\"chrome-launcher\");\nconst { exec } = require(\"child_process\");\nconst emailUtils = require(\"./email-enhancement\");\n\npuppeteerExtra.use(StealthPlugin());\n\nlet browserMaps;\nlet isCancelled = false;\n\nasync function cancelScraping() {\n  isCancelled = true;\n  if (browserMaps) {\n    await browserMaps.close();\n  }\n}\n\nasync function getChromePath() {\n  const installations = await chromeLauncher.Launcher.getInstallations();\n  if (installations.length > 0) {\n    return installations[0];\n  } else {\n    throw new Error(\"Chrome installation not found.\");\n  }\n}\n\nasync function autoScroll(page) {\n  console.log(\"Starting enhanced auto-scroll to load maximum results...\");\n  \n  await page.evaluate(async () => {\n    const wrapper = document.querySelector('div[role=\"feed\"]') || \n                   document.querySelector('[role=\"main\"]') || \n                   document.querySelector('.section-layout') ||\n                   document.querySelector('[data-value=\"Search results\"]') ||\n                   document.querySelector('.section-result') ||\n                   document.body;\n\n    await new Promise((resolve) => {\n      let totalHeight = 0;\n      const distance = 1000;\n      const scrollDelay = 3000;\n\n      const timer = setInterval(async () => {\n        let scrollHeightBefore = wrapper.scrollHeight;\n        \n        if (wrapper && wrapper !== document.body) {\n          wrapper.scrollBy(0, distance);\n        } else {\n          window.scrollBy(0, distance);\n        }\n        \n        totalHeight += distance;\n\n        // Try to click \"Show more results\" buttons\n        const showMoreButtons = document.querySelectorAll(\n          'button[jsaction*=\"more\"], button[aria-label*=\"more\"], button[aria-label*=\"More\"], ' +\n          '.section-loading-more-results button, button[data-value=\"Show more results\"]'\n        );\n        showMoreButtons.forEach(button => {\n          if (button.offsetParent !== null && button.style.display !== 'none') {\n            try {\n              button.click();\n            } catch (e) {\n              // Ignore click errors\n            }\n          }\n        });\n\n        if (totalHeight >= scrollHeightBefore) {\n          totalHeight = 0;\n          await new Promise((resolve) => setTimeout(resolve, scrollDelay));\n\n          let scrollHeightAfter = wrapper.scrollHeight;\n          if (scrollHeightAfter > scrollHeightBefore) {\n            return;\n          } else {\n            clearInterval(timer);\n            resolve();\n          }\n        }\n      }, 200);\n    });\n  });\n  \n  console.log(\"Enhanced auto-scroll process completed\");\n}\n\nfunction estimateScrapingTime(businessCount) {\n  const totalBatches = Math.ceil(businessCount / 5);\n  return totalBatches * 1;\n}\n\nasync function delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function scrapeEmailsParallel(businesses, event) {\n  const chromePath = await getChromePath();\n  const browser = await puppeteerExtra.launch({\n    headless: true,\n    executablePath: chromePath,\n    args: [\"--no-sandbox\", \"--disable-setuid-sandbox\"],\n  });\n\n  const batchSize = 5;\n  const businessChunks = [];\n\n  for (let i = 0; i < businesses.length; i += batchSize) {\n    businessChunks.push(businesses.slice(i, i + batchSize));\n  }\n\n  const totalBatches = businessChunks.length;\n  const estimatedTimePerBatch = 60;\n  let processedCount = 0;\n\n  for (const [index, chunk] of businessChunks.entries()) {\n    if (isCancelled) break;\n    \n    console.log(`Processing batch ${index + 1} of ${totalBatches}...`);\n\n    await Promise.all(\n      chunk.map(async (biz) => {\n        if (isCancelled) return;\n        \n        if (!biz.bizWebsite || !biz.bizWebsite.startsWith(\"http\")) {\n          biz.email = \"No information\";\n          processedCount++;\n          event.reply(\"scraper-progress\", { \n            current: processedCount, \n            total: businesses.length,\n            business: biz.storeName \n          });\n          return;\n        }\n\n        try {\n          const page = await browser.newPage();\n          await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');\n          \n          // Retry mechanism for page loading\n          let pageLoaded = false;\n          for (let retry = 0; retry < 3; retry++) {\n            try {\n              await page.goto(biz.bizWebsite, {\n                waitUntil: \"networkidle2\",\n                timeout: 60000,\n              });\n              pageLoaded = true;\n              break;\n            } catch (pageError) {\n              console.log(`Retry ${retry + 1} for ${biz.storeName}: ${pageError.message}`);\n              if (retry < 2) await delay(2000);\n            }\n          }\n          \n          if (!pageLoaded) {\n            throw new Error('Failed to load page after 3 attempts');\n          }\n          \n          await delay(2000);\n          \n          const pageHtml = await page.content();\n\n          // Extract emails using multiple patterns\n          let allEmailMatches = [];\n          for (const pattern of emailUtils.emailPatterns) {\n            const matches = pageHtml.match(pattern) || [];\n            allEmailMatches.push(...matches);\n          }\n          \n          // Also search in page text content (visible text)\n          const pageText = await page.evaluate(() => document.body.innerText || '');\n          for (const pattern of emailUtils.emailPatterns) {\n            const textMatches = pageText.match(pattern) || [];\n            allEmailMatches.push(...textMatches);\n          }\n          \n          if (allEmailMatches.length > 0) {\n            // Normalize and validate all found emails\n            const processedEmails = [];\n            \n            for (const email of allEmailMatches) {\n              const normalizedEmail = emailUtils.normalizeEmail(email);\n              const validation = emailUtils.validateEmail(normalizedEmail);\n              \n              if (validation.isValid) {\n                processedEmails.push({\n                  email: validation.email,\n                  priority: validation.priority\n                });\n              }\n            }\n            \n            // Remove duplicates and sort by priority\n            const uniqueEmails = processedEmails.filter((item, index, self) => \n              index === self.findIndex(t => t.email === item.email)\n            ).sort((a, b) => b.priority - a.priority);\n            \n            const validEmails = uniqueEmails.map(item => item.email);\n            \n              if (validEmails.length > 0) {\n              const domain = new URL(biz.bizWebsite).hostname.replace(\"www.\", \"\");\n              const prioritizedEmail = validEmails.find((email) => email.includes(domain)) || validEmails[0];\n              biz.email = prioritizedEmail;\n              biz.allEmails = validEmails.slice(0, 3); // Store up to 3 emails for reference\n              biz.emailSource = 'website_content';\n            } else {\n              const contactEmail = await searchContactPagesEnhanced(page, biz);\n              biz.email = contactEmail;\n              biz.emailSource = contactEmail.includes('(estimated)') ? 'estimated' : 'contact_page';\n            }\n          } else {\n            const contactEmail = await searchContactPagesEnhanced(page, biz);\n            biz.email = contactEmail;\n            biz.emailSource = contactEmail.includes('(estimated)') ? 'estimated' : 'fallback';\n          }\n\n          await page.close();\n        } catch (error) {\n          console.error(`Error scraping email for ${biz.storeName}:`, error.message);\n          \n          // Final fallback: try to generate common email patterns\n          if (biz.bizWebsite) {\n            try {\n              const domain = new URL(biz.bizWebsite).hostname.replace('www.', '');\n              biz.email = `info@${domain} (estimated)`;\n              biz.emailSource = 'domain_guess';\n            } catch (e) {\n              biz.email = \"No information\";\n              biz.emailSource = 'failed';\n            }\n          } else {\n            biz.email = \"No information\";\n            biz.emailSource = 'no_website';\n          }\n        }\n\n        processedCount++;\n        event.reply(\"scraper-progress\", { \n          current: processedCount, \n          total: businesses.length,\n          business: biz.storeName \n        });\n      })\n    );\n\n    const batchesRemaining = totalBatches - (index + 1);\n    const secondsLeft = batchesRemaining * estimatedTimePerBatch;\n    const minutesLeft = Math.floor(secondsLeft / 60);\n    const extraSeconds = secondsLeft % 60;\n\n    event.reply(\n      \"scraper-status\",\n      `Batch ${index + 1}/${totalBatches} completed. Estimated time left: ${minutesLeft}m ${extraSeconds}s`\n    );\n\n    if (index < totalBatches - 1) {\n      await delay(60000);\n    }\n  }\n\n  await browser.close();\n}\n\nasync function searchContactPagesEnhanced(page, biz) {\n  try {\n    // Enhanced link detection for contact, about, team, and leadership pages\n    const links = await page.$$eval(\"a\", (anchors) =>\n      anchors.map((a) => ({\n        href: a.href,\n        text: a.textContent.toLowerCase(),\n        title: a.title ? a.title.toLowerCase() : ''\n      })).filter((link) => {\n        const href = link.href.toLowerCase();\n        const text = link.text;\n        const title = link.title;\n        \n        // Expanded search patterns for pages likely to contain emails\n        const contactPatterns = [\n          'contact', 'about', 'reach', 'get in touch', 'connect',\n          'team', 'staff', 'leadership', 'management', 'directors',\n          'our team', 'meet the team', 'who we are', 'our story',\n          'headquarters', 'office', 'location', 'branch',\n          'support', 'help', 'customer service', 'inquiry',\n          'sales', 'business', 'partnership', 'collaborate'\n        ];\n        \n        const urlPatterns = [\n          '/contact', '/about', '/team', '/staff', '/leadership',\n          '/management', '/our-team', '/meet-team', '/who-we-are',\n          '/office', '/location', '/branch', '/support', '/help',\n          '/sales', '/business', '/partnership', '/connect'\n        ];\n        \n        // Check text, title, and href for patterns\n        const hasContactPattern = contactPatterns.some(pattern => \n          text.includes(pattern) || title.includes(pattern)\n        );\n        \n        const hasUrlPattern = urlPatterns.some(pattern => \n          href.includes(pattern)\n        );\n        \n        return (hasContactPattern || hasUrlPattern) && \n               link.href.startsWith(\"http\") &&\n               !href.includes('facebook.com') &&\n               !href.includes('twitter.com') &&\n               !href.includes('instagram.com') &&\n               !href.includes('linkedin.com/company');\n      }).map(link => link.href).slice(0, 5) // Increased to 5 pages\n    );\n\n    // Try each contact page\n    for (const link of links) {\n      try {\n        await page.goto(link, { \n          waitUntil: \"networkidle2\", \n          timeout: 60000 \n        });\n        await delay(1500);\n        \n        // Extract emails from both HTML and visible text\n        const contactPageHtml = await page.content();\n        const contactPageText = await page.evaluate(() => document.body.innerText || '');\n        \n        let allContactEmails = [];\n        \n        // Use enhanced email patterns\n        for (const pattern of emailUtils.emailPatterns) {\n          const htmlMatches = contactPageHtml.match(pattern) || [];\n          const textMatches = contactPageText.match(pattern) || [];\n          allContactEmails.push(...htmlMatches, ...textMatches);\n        }\n        \n        if (allContactEmails.length > 0) {\n          // Process and validate emails\n          const processedEmails = [];\n          \n          for (const email of allContactEmails) {\n            const normalizedEmail = emailUtils.normalizeEmail(email);\n            const validation = emailUtils.validateEmail(normalizedEmail);\n            \n            if (validation.isValid) {\n              processedEmails.push({\n                email: validation.email,\n                priority: validation.priority\n              });\n            }\n          }\n          \n          // Remove duplicates and sort by priority\n          const uniqueEmails = processedEmails.filter((item, index, self) => \n            index === self.findIndex(t => t.email === item.email)\n          ).sort((a, b) => b.priority - a.priority);\n          \n          if (uniqueEmails.length > 0) {\n            return uniqueEmails[0].email;\n          }\n        }\n      } catch (e) {\n        console.log(`Failed to load page: ${link}`);\n        continue; // Try next page\n      }\n    }\n\n    // If no emails found in contact pages, try social media extraction\n    return await searchSocialMediaEmails(page, biz);\n    \n  } catch (error) {\n    console.log(`Error searching contact pages for ${biz.storeName}`);\n    return await searchSocialMediaEmails(page, biz);\n  }\n}\n\nasync function searchSocialMediaEmails(page, biz) {\n  try {\n    // Go back to the original website\n    if (biz.bizWebsite) {\n      await page.goto(biz.bizWebsite, { \n        waitUntil: \"networkidle2\", \n        timeout: 60000 \n      });\n      await delay(1000);\n    }\n    \n    // Look for social media links and other external profiles\n    const socialLinks = await page.$$eval(\"a\", (anchors) =>\n      anchors.map((a) => a.href).filter((href) => {\n        const url = href.toLowerCase();\n        return (url.includes('linkedin.com/in/') || \n               url.includes('linkedin.com/pub/') ||\n               url.includes('facebook.com/') ||\n               url.includes('twitter.com/') ||\n               url.includes('instagram.com/')) &&\n               href.startsWith(\"http\");\n      }).slice(0, 3)\n    );\n\n    // Try to find emails in form fields, placeholders, and meta tags\n    const formEmails = await page.evaluate(() => {\n      const emails = [];\n      \n      // Check form placeholders\n      const inputs = document.querySelectorAll('input[type=\"email\"], input[placeholder*=\"email\" i], input[placeholder*=\"@\"]');\n      inputs.forEach(input => {\n        if (input.placeholder && input.placeholder.includes('@')) {\n          emails.push(input.placeholder);\n        }\n      });\n      \n      // Check meta tags\n      const metaTags = document.querySelectorAll('meta');\n      metaTags.forEach(meta => {\n        const content = meta.getAttribute('content') || '';\n        if (content.includes('@') && content.includes('.')) {\n          emails.push(content);\n        }\n      });\n      \n      // Check data attributes\n      const dataElements = document.querySelectorAll('[data-email], [data-contact], [data-mail]');\n      dataElements.forEach(el => {\n        const dataEmail = el.getAttribute('data-email') || el.getAttribute('data-contact') || el.getAttribute('data-mail');\n        if (dataEmail && dataEmail.includes('@')) {\n          emails.push(dataEmail);\n        }\n      });\n      \n      return emails;\n    });\n    \n    // Process form emails\n    if (formEmails.length > 0) {\n      for (const email of formEmails) {\n        const normalizedEmail = emailUtils.normalizeEmail(email);\n        const validation = emailUtils.validateEmail(normalizedEmail);\n        \n        if (validation.isValid) {\n          return validation.email;\n        }\n      }\n    }\n    \n    // If still no email found, try a general email guess based on domain\n    if (biz.bizWebsite) {\n      try {\n        const domain = new URL(biz.bizWebsite).hostname.replace('www.', '');\n        const commonEmails = [\n          `info@${domain}`,\n          `contact@${domain}`,\n          `hello@${domain}`,\n          `admin@${domain}`,\n          `support@${domain}`,\n          `sales@${domain}`\n        ];\n        \n        // Return the first common email pattern (this is a guess)\n        for (const guessEmail of commonEmails) {\n          const validation = emailUtils.validateEmail(guessEmail);\n          if (validation.isValid) {\n            return `${guessEmail} (estimated)`;\n          }\n        }\n      } catch (e) {\n        // Invalid URL\n      }\n    }\n    \n    return \"No information\";\n  } catch (error) {\n    console.log(`Error in social media search for ${biz.storeName}`);\n    return \"No information\";\n  }\n}\n\nasync function searchGoogleMaps(GOOGLE_MAPS_QUERY, event) {\n  isCancelled = false;\n  try {\n    console.log(\"Launching Google Maps Puppeteer...\");\n    const chromePath = await getChromePath();\n    \n    browserMaps = await puppeteerExtra.launch({\n      headless: true,\n      executablePath: chromePath,\n      args: [\"--no-sandbox\", \"--disable-setuid-sandbox\"],\n      protocolTimeout: 300000,\n    });\n\n    const page = await browserMaps.newPage();\n    await page.setViewport({ width: 1280, height: 800 });\n    page.setDefaultTimeout(300000);\n    page.setDefaultNavigationTimeout(60000);\n\n    await page.goto(`https://www.google.com/maps/search/${encodeURIComponent(GOOGLE_MAPS_QUERY)}`, {\n      waitUntil: \"networkidle2\",\n    });\n\n    if (isCancelled) {\n      await browserMaps.close();\n      return;\n    }\n\n    event.reply(\"scraper-status\", \"Scrolling to load all available results...\");\n    await autoScroll(page);\n\n    if (isCancelled) {\n      await browserMaps.close();\n      return;\n    }\n    \n    const businessCount = await page.evaluate(() => {\n      return document.querySelectorAll(\"a[href*='/maps/place/']\").length;\n    });\n    \n    console.log(`Scrolling completed. Found ${businessCount} potential businesses to extract.`);\n    event.reply(\"scraper-status\", `Scrolling completed. Found ${businessCount} businesses. Extracting data...`);\n\n    const html = await page.content();\n    const $ = cheerio.load(html);\n    const businesses = [];\n\n    console.log(\"Extracting business details...\");\n    $(\"a[href*='/maps/place/']\").each((i, el) => {\n      const parent = $(el).closest(\"div\");\n      const url = $(el).attr(\"href\");\n      \n      let website = parent.find('a[data-value=\"Website\"]').attr(\"href\");\n      if (!website) {\n        website = parent.find('a[href^=\"http\"]:not([href*=\"google.com\"]):not([href*=\"maps\"]):not([href*=\"goo.gl\"])').first().attr(\"href\");\n      }\n      \n      const storeName = parent.find(\"div.fontHeadlineSmall\").text();\n      const address = parent.find(\"div.fontBodyMedium\").first().text().trim();\n\n      let rawText = parent.text();\n      let phoneMatch = rawText.match(/(\\+?\\d{1,4}[-.\\s]?)?\\(?\\d{3,4}\\)?[-.\\s]?\\d{3,4}[-.\\s]?\\d{3,4}|\\+63\\s?\\d{2,3}[\\s-]?\\d{3}[\\s-]?\\d{4}|\\(\\d{3}\\)\\s?\\d{3}-\\d{4}/g);\n      let phone = phoneMatch ? phoneMatch.join(\", \") : \"No information\";\n\n      if (storeName && storeName.trim().length > 0) {\n        businesses.push({\n          storeName: storeName.trim(),\n          address: address || \"Not found\",\n          phone: phone,\n          email: \"Fetching...\",\n          googleUrl: url ? `https://www.google.com${url}` : null,\n          bizWebsite: website || null,\n        });\n      }\n    });\n\n    if (isCancelled) {\n      await browserMaps.close();\n      return;\n    }\n\n    console.log(`Found ${businesses.length} businesses. Scraping websites for emails...`);\n    event.reply(\"scraper-status\", `Found ${businesses.length} businesses. Estimating time...`);\n\n    const estimatedTime = estimateScrapingTime(businesses.length);\n    console.log(`Estimated time required: ${estimatedTime} minutes`);\n    event.reply(\"estimated-time\", estimatedTime);\n\n    if (isCancelled) {\n      await browserMaps.close();\n      return;\n    }\n\n    await scrapeEmailsParallel(businesses, event);\n\n    await browserMaps.close();\n\n    console.log(\"Scraping completed, performing email analysis...\");\n    \n    // Analyze email collection results\n    const emailStats = {\n      total: businesses.length,\n      withEmails: businesses.filter(b => b.email && b.email !== \"No information\").length,\n      fromWebsite: businesses.filter(b => b.emailSource === 'website_content').length,\n      fromContactPage: businesses.filter(b => b.emailSource === 'contact_page').length,\n      estimated: businesses.filter(b => b.emailSource === 'estimated' || b.emailSource === 'domain_guess').length\n    };\n    \n    console.log(`Email collection results:`, emailStats);\n    event.reply(\"scraper-status\", `Scraping completed! Found ${emailStats.withEmails}/${emailStats.total} email addresses`);\n    event.reply(\"scraper-results\", businesses);\n  } catch (error) {\n    console.error(\"Error in searchGoogleMaps:\", error.message);\n    event.reply(\"scraper-status\", `Error: ${error.message}`);\n    if (browserMaps) {\n      await browserMaps.close();\n    }\n  }\n}\n\nmodule.exports = {\n  searchGoogleMaps,\n  cancelScraping\n};\n","size_bytes":20743},"main.js":{"content":"const { app, BrowserWindow, ipcMain, dialog, shell } = require(\"electron\");\nconst path = require(\"path\");\nconst { searchGoogleMaps, cancelScraping } = require(\"./googleMaps\");\nconst fs = require(\"fs\");\nconst xlsx = require(\"xlsx\");\nconst { google } = require(\"googleapis\");\nconst http = require(\"http\");\nconst url = require(\"url\");\nconst EmailDatabase = require(\"./database\");\n\nlet mainWindow;\nlet oauth2Client = null;\nlet authServer = null; // Track the OAuth server\nlet scrapingProcess = null;\nlet emailSendingProcess = null;\nlet userProfile = null;\nlet emailDB = null;\nlet activeTimeouts = new Set();\nlet currentEmailController = null;\n\napp.whenReady().then(() => {\n  emailDB = new EmailDatabase();\n\n  mainWindow = new BrowserWindow({\n    width: 1200,\n    height: 800,\n    icon: path.join(__dirname, \"/src/img/bcdq.png\"),\n    webPreferences: {\n      preload: path.join(__dirname, \"preload.js\"),\n      nodeIntegration: false,\n      contextIsolation: true,\n    },\n  });\n\n  mainWindow.loadFile(\"index.html\");\n  mainWindow.maximize();\n  mainWindow.setMenuBarVisibility(false);\n});\n\nipcMain.on(\"run-scraper\", async (event, query) => {\n  try {\n    scrapingProcess = searchGoogleMaps(query, event);\n    await scrapingProcess;\n  } catch (error) {\n    event.reply(\"scraper-status\", `❌ Error: ${error.message}`);\n  }\n});\n\nipcMain.on(\"cancel-scraper\", async (event) => {\n  try {\n    if (scrapingProcess) {\n      await cancelScraping();\n      scrapingProcess = null;\n      event.reply(\"scraper-status\", \"❌ Scraping cancelled by user\");\n    }\n  } catch (error) {\n    console.error(\"Error cancelling scraper:\", error);\n  }\n});\n\noauth2Client = new google.auth.OAuth2(\n  (process.env.GOOGLE_CLIENT_ID =\n    \"82150396052-rnvsou8p8gp54cf235gc59eagtcgie9n.apps.googleusercontent.com\"),\n  (process.env.GOOGLE_CLIENT_SECRET = \"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\"),\n  \"http://localhost:3000/oauth2callback\"\n);\n\nipcMain.on(\"google-auth\", async (event) => {\n  try {\n    if (!process.env.GOOGLE_CLIENT_ID || !process.env.GOOGLE_CLIENT_SECRET) {\n      throw new Error(\"Google credentials not configured\");\n    }\n\n    const authUrl = oauth2Client.generateAuthUrl({\n      access_type: \"offline\",\n      scope: [\n        \"https://www.googleapis.com/auth/gmail.send\",\n        \"https://www.googleapis.com/auth/userinfo.profile\",\n        \"https://www.googleapis.com/auth/userinfo.email\",\n      ],\n      prompt: \"consent select_account\",\n    });\n\n    // Close previous server if still running\n    if (authServer) {\n      try {\n        authServer.close();\n      } catch (e) {}\n      authServer = null;\n    }\n\n    authServer = http.createServer(async (req, res) => {\n      const { code } = url.parse(req.url, true).query;\n\n      if (code) {\n        try {\n          const { tokens } = await oauth2Client.getToken(code);\n          oauth2Client.setCredentials(tokens);\n\n          const oauth2 = google.oauth2({ version: \"v2\", auth: oauth2Client });\n          const { data: userInfo } = await oauth2.userinfo.get();\n          userProfile = userInfo;\n\n          res.writeHead(200, { \"Content-Type\": \"text/html\" });\n          res.end(`\n  <html>\n    <head>\n      <title>Authentication Successful</title>\n      <style>\n        body {\n          background: linear-gradient(135deg, #43cea2 0%, #185a9d 100%);\n          color: #fff;\n          font-family: Arial, sans-serif;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: center;\n          height: 100vh;\n          margin: 0;\n        }\n        .container {\n          background: rgba(0,0,0,0.3);\n          padding: 40px 30px;\n          border-radius: 16px;\n          box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);\n          text-align: center;\n        }\n        h1 {\n          font-size: 2.2em;\n          margin-bottom: 10px;\n        }\n        p {\n          font-size: 1.2em;\n        }\n        .close-btn {\n          margin-top: 25px;\n          padding: 10px 24px;\n          background: #43cea2;\n          color: #fff;\n          border: none;\n          border-radius: 8px;\n          font-size: 1em;\n          cursor: pointer;\n          transition: background 0.2s;\n        }\n        .close-btn:hover {\n          background: #185a9d;\n        }\n      </style>\n    </head>\n    <body>\n      <div class=\"container\">\n        <h1>✅ Authentication Successful!</h1>\n        <p>You can now close this window and return to the app.</p>\n        <button class=\"close-btn\" onclick=\"window.close()\">Close</button>\n      </div>\n    </body>\n  </html>\n`);\n\n          event.reply(\"auth-success\", userProfile);\n          authServer.close();\n        } catch (error) {\n          res.writeHead(400, { \"Content-Type\": \"text/html\" });\n          res.end(\"<h1>Authentication failed. Please try again.</h1>\");\n          event.reply(\"auth-error\", error.message);\n          authServer.close();\n        }\n      }\n    });\n\n    const { exec } = require(\"child_process\");\n    const chromePath =\n      '\"C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\"'; // Default Chrome path\n    authServer.listen(3000, () => {\n      exec(`${chromePath} \"${authUrl}\"`, (error) => {\n        if (error) {\n          // Fallback to default browser if Chrome is not found\n          shell.openExternal(authUrl);\n        }\n      });\n    });\n  } catch (error) {\n    event.reply(\"auth-error\", error.message);\n  }\n});\n\n// Email sending with rate limiting and retry logic\nasync function sendEmailWithRetry(\n  gmail,\n  emailData,\n  templateData,\n  maxRetries = 3,\n  baseDelay = 5000\n) {\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      let emailContent = templateData.body\n        .replace(/{companyName}/g, emailData.companyName || \"\")\n        .replace(/{email}/g, emailData.email || \"\")\n        .replace(/{phone}/g, emailData.phone || \"\")\n        .replace(/{address}/g, emailData.address || \"\")\n        .replace(/{website}/g, emailData.website || \"\");\n\n      const emailSubjectProcessed = templateData.subject\n        .replace(/{companyName}/g, emailData.companyName || \"\")\n        .replace(/{email}/g, emailData.email || \"\")\n        .replace(/{phone}/g, emailData.phone || \"\")\n        .replace(/{address}/g, emailData.address || \"\")\n        .replace(/{website}/g, emailData.website || \"\");\n\n      // Remove subject from email content if it appears at the beginning\n      if (emailContent.trim().startsWith(emailSubjectProcessed)) {\n        emailContent = emailContent.replace(emailSubjectProcessed, '').trim();\n      }\n\n      // Convert plain text to HTML with proper formatting\n      const htmlContent = emailContent\n        .replace(/\\n/g, \"<br>\")\n        .replace(/\\r\\n/g, \"<br>\")\n        .replace(/\\r/g, \"<br>\");\n\n      // Add email footer\n      const footerImagePath = path.join(__dirname, \"src/img/Emailfooter2.jpg\");\n      let footerImage = \"\";\n\n      try {\n        const footerImageBuffer = fs.readFileSync(footerImagePath);\n        const footerImageBase64 = footerImageBuffer.toString(\"base64\");\n        footerImage = `<br><br><div style=\"margin-top: 20px;\"><img src=\"data:image/jpeg;base64,${footerImageBase64}\" alt=\"Email Footer\" style=\"max-width: 300px; height: auto;\"></div>`;\n      } catch (error) {\n        console.log(\"Footer image not found, continuing without footer\");\n      }\n\n      const fullHtmlContent = `\n        <html>\n        <body style=\"font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0;\">\n          <div style=\"max-width: 800px; padding: 20px; background-color: #ffffff;\">\n            <div style=\"text-align: left; margin-bottom: 20px;\">\n              ${htmlContent}\n            </div>\n            ${footerImage}\n          </div>\n        </body>\n        </html>`;\n\n      const emailMessage = [\n        `To: ${emailData.email}`,\n        `Subject: ${emailSubjectProcessed}`,\n        `Content-Type: text/html; charset=\"UTF-8\"`,\n        `MIME-Version: 1.0`,\n        \"\",\n        fullHtmlContent,\n      ].join(\"\\r\\n\");\n\n      const encodedEmail = Buffer.from(emailMessage)\n        .toString(\"base64\")\n        .replace(/\\+/g, \"-\")\n        .replace(/\\//g, \"_\")\n        .replace(/=+$/, \"\");\n\n      await gmail.users.messages.send({\n        userId: \"me\",\n        requestBody: { raw: encodedEmail },\n      });\n\n      return { success: true, subject: emailSubjectProcessed };\n    } catch (error) {\n      if (\n        error.message.includes(\"Too many concurrent requests\") &&\n        attempt < maxRetries\n      ) {\n        const delay = baseDelay * Math.pow(2, attempt - 1); // Exponential backoff\n        console.log(\n          `Rate limit hit for ${emailData.email}, retrying in ${delay}ms (attempt ${attempt}/${maxRetries})`\n        );\n        await new Promise((resolve) => setTimeout(resolve, delay));\n        continue;\n      }\n      throw error;\n    }\n  }\n}\n\nipcMain.on(\"send-emails\", async (event, { emailData, template, subject }) => {\n  try {\n    if (!oauth2Client || !oauth2Client.credentials) {\n      event.reply(\"email-status\", \"❌ Please authenticate with Google first\");\n      return;\n    }\n\n    emailSendingProcess = true;\n    const gmail = google.gmail({ version: \"v1\", auth: oauth2Client });\n    let sentCount = 0;\n    let failedCount = 0;\n    const validEmails = emailData.filter((data) => {\n      // Basic email validation\n      const email = data.email;\n      return (\n        email &&\n        email !== \"No info\" &&\n        email !== \"Fetching...\" &&\n        email.includes(\"@\") &&\n        email.includes(\".\") &&\n        !email.match(/^\\d+$/) && // Not just numbers\n        email.length > 5\n      );\n    });\n    const totalEmails = validEmails.length;\n\n    event.reply(\n      \"email-status\",\n      `📧 Starting to send ${totalEmails} emails with rate limiting...`\n    );\n\n    // Prepare template data with subject and body\n    const templateData = {\n      subject: subject || \"PRU LIFE UK FINANCIAL WELLNESS AND RETIREMENT PROGRAM PROPOSAL\",\n      body: template\n    };\n\n    for (const [index, data] of validEmails.entries()) {\n      if (!emailSendingProcess) {\n        event.reply(\"email-status\", \"❌ Email sending cancelled by user\");\n        return;\n      }\n\n      try {\n        const result = await sendEmailWithRetry(gmail, data, templateData);\n\n        if (result.success) {\n          // Save to database\n          try {\n            await emailDB.addSentEmail({\n              companyName: data.companyName,\n              email: data.email,\n              phone: data.phone,\n              address: data.address,\n              website: data.website,\n              subject: result.subject,\n            });\n          } catch (dbError) {\n            console.error(\"Error saving to database:\", dbError);\n          }\n\n          sentCount++;\n          console.log(`✅ Email sent successfully to ${data.email}`);\n        }\n\n        event.reply(\"email-progress\", {\n          sent: sentCount,\n          total: totalEmails,\n          current: data.companyName,\n        });\n\n        // Rate limiting: Wait between emails (increased from 1.5s to 3s)\n        const delayTime = 3000 + Math.random() * 2000; // 3-5 seconds random delay\n        await new Promise((resolve, reject) => {\n          const timeoutId = setTimeout(() => {\n            activeTimeouts.delete(timeoutId);\n            resolve();\n          }, delayTime);\n          activeTimeouts.add(timeoutId);\n        });\n      } catch (emailError) {\n        failedCount++;\n        console.error(\n          `❌ Failed to send email to ${data.email}:`,\n          emailError.message\n        );\n\n        // Longer delay after failures\n        await new Promise((resolve, reject) => {\n          const timeoutId = setTimeout(() => {\n            activeTimeouts.delete(timeoutId);\n            resolve();\n          }, 5000);\n          activeTimeouts.add(timeoutId);\n        });\n      }\n    }\n\n    emailSendingProcess = false;\n    event.reply(\n      \"email-status\",\n      `✅ Email sending complete! Sent: ${sentCount}, Failed: ${failedCount}`\n    );\n  } catch (error) {\n    emailSendingProcess = false;\n    event.reply(\"email-status\", `❌ Error sending emails: ${error.message}`);\n  }\n});\n\nipcMain.on(\"cancel-emails\", (event) => {\n  if (emailSendingProcess) {\n    emailSendingProcess = false;\n    \n    // Clear all active timeouts immediately\n    console.log(`Clearing ${activeTimeouts.size} active timeouts`);\n    for (const timeoutId of activeTimeouts) {\n      clearTimeout(timeoutId);\n    }\n    activeTimeouts.clear();\n    \n    // Abort any ongoing Gmail API requests\n    if (currentEmailController) {\n      currentEmailController.abort();\n      currentEmailController = null;\n    }\n    \n    event.reply(\"email-status\", \"❌ Email sending cancelled by user\");\n    console.log(\"Email sending process cancelled by user - all timers cleared\");\n  }\n});\n\nipcMain.on(\"download-excel\", (event, scrapedData) => {\n  if (!scrapedData || scrapedData.length === 0) {\n    event.reply(\"download-status\", \"❌ No data available to download.\");\n    return;\n  }\n\n  try {\n    const workbook = xlsx.utils.book_new();\n    const worksheet = xlsx.utils.json_to_sheet(scrapedData);\n    xlsx.utils.book_append_sheet(workbook, worksheet, \"ScrapedData\");\n\n    const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, \"-\");\n    const filePath = path.join(\n      app.getPath(\"desktop\"),\n      `LeadsData_${timestamp}.xlsx`\n    );\n\n    xlsx.writeFile(workbook, filePath);\n    event.reply(\"download-status\", `✅ File saved: ${filePath}`);\n  } catch (error) {\n    event.reply(\"download-status\", `❌ Error: ${error.message}`);\n  }\n});\n\n// Database IPC handlers\nipcMain.handle(\"get-sent-emails\", async () => {\n  try {\n    return await emailDB.getAllSentEmails();\n  } catch (error) {\n    console.error(\"Error getting sent emails:\", error);\n    return [];\n  }\n});\n\nipcMain.handle(\"check-email-sent\", async (event, emailAddress) => {\n  try {\n    return await emailDB.checkIfEmailSent(emailAddress);\n  } catch (error) {\n    console.error(\"Error checking email:\", error);\n    return false;\n  }\n});\n\nipcMain.handle(\"delete-email-record\", async (event, id) => {\n  try {\n    return await emailDB.deleteEmailRecord(id);\n  } catch (error) {\n    console.error(\"Error deleting email record:\", error);\n    throw error;\n  }\n});\n\nipcMain.handle(\"clear-all-email-history\", async (event) => {\n  try {\n    return await emailDB.clearAllEmails();\n  } catch (error) {\n    console.error(\"Error clearing email history:\", error);\n    throw error;\n  }\n});\n\napp.on(\"window-all-closed\", () => {\n  // Cancel all email processes and clear timeouts\n  emailSendingProcess = false;\n  console.log(`App closing - clearing ${activeTimeouts.size} active timeouts`);\n  for (const timeoutId of activeTimeouts) {\n    clearTimeout(timeoutId);\n  }\n  activeTimeouts.clear();\n  \n  if (currentEmailController) {\n    currentEmailController.abort();\n    currentEmailController = null;\n  }\n  \n  if (emailDB) {\n    emailDB.close();\n  }\n  if (process.platform !== \"darwin\") {\n    app.quit();\n  }\n});\n\n// Also handle app quit event for additional safety\napp.on(\"before-quit\", () => {\n  // Force stop all email processes\n  emailSendingProcess = false;\n  console.log(`Before quit - clearing ${activeTimeouts.size} active timeouts`);\n  for (const timeoutId of activeTimeouts) {\n    clearTimeout(timeoutId);\n  }\n  activeTimeouts.clear();\n  \n  if (currentEmailController) {\n    currentEmailController.abort();\n    currentEmailController = null;\n  }\n  \n  console.log(\"App quitting - all email processes cancelled\");\n});\n","size_bytes":15432},"preload.js":{"content":"const { contextBridge, ipcRenderer } = require('electron');\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n  runScraper: (query) => ipcRenderer.send('run-scraper', query),\n  cancelScraper: () => ipcRenderer.send('cancel-scraper'),\n  googleAuth: () => ipcRenderer.send('google-auth'),\n  sendEmails: (data) => ipcRenderer.send('send-emails', data),\n  cancelEmails: () => ipcRenderer.send('cancel-emails'),\n  downloadExcel: (data) => ipcRenderer.send('download-excel', data),\n\n  // Database functions\n  getSentEmails: () => ipcRenderer.invoke('get-sent-emails'),\n  checkEmailSent: (emailAddress) => ipcRenderer.invoke('check-email-sent', emailAddress),\n  deleteEmailRecord: (id) => ipcRenderer.invoke('delete-email-record', id),\n  clearAllEmailHistory: () => ipcRenderer.invoke('clear-all-email-history'),\n\n  onScraperStatus: (callback) => ipcRenderer.on('scraper-status', callback),\n  onScraperProgress: (callback) => ipcRenderer.on('scraper-progress', callback),\n  onScraperResults: (callback) => ipcRenderer.on('scraper-results', callback),\n  onEstimatedTime: (callback) => ipcRenderer.on('estimated-time', callback),\n  onAuthSuccess: (callback) => ipcRenderer.on('auth-success', callback),\n  onAuthError: (callback) => ipcRenderer.on('auth-error', callback),\n  onEmailStatus: (callback) => ipcRenderer.on('email-status', callback),\n  onEmailProgress: (callback) => ipcRenderer.on('email-progress', callback),\n  onDownloadStatus: (callback) => ipcRenderer.on('download-status', callback),\n\n  removeAllListeners: (channel) => ipcRenderer.removeAllListeners(channel)\n});","size_bytes":1571},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"trafilatura>=2.0.0\",\n]\n","size_bytes":170},"renderer.js":{"content":"let startTime;\nlet processedCount = 0;\nlet totalBusinesses = 0;\nlet estimatedTime = \"Calculating...\";\nlet scrapingInProgress = false;\nlet emailSendingInProgress = false;\nlet emailTemplate = \"\";\nlet isLoggedIn = false;\nlet userProfile = null;\n\n// Initialize app\nfunction initializeApp() {\n  updateSendEmailsButton();\n  loadEmailTemplate();\n  updateAuthUI();\n  setupEventListeners();\n  \n  // Cancel processes on window close\n  window.addEventListener('beforeunload', () => {\n    if (scrapingInProgress || emailSendingInProgress) {\n      cancelAllProcesses();\n    }\n  });\n}\n\nfunction setupEventListeners() {\n  // Button event listeners\n  document.getElementById(\"searchBtn\").addEventListener(\"click\", runScraper);\n  document\n    .getElementById(\"cancelAllBtn\")\n    .addEventListener(\"click\", cancelAllProcesses);\n  document\n    .getElementById(\"authBtn\")\n    .addEventListener(\"click\", authenticateGoogle);\n  document\n    .getElementById(\"selectAll\")\n    .addEventListener(\"change\", toggleSelectAll);\n  document\n    .getElementById(\"removeSelectedBtn\")\n    .addEventListener(\"click\", removeSelected);\n  document\n    .getElementById(\"sendEmailsBtn\")\n    .addEventListener(\"click\", sendEmails);\n  document.getElementById(\"importBtn\").addEventListener(\"click\", importFile);\n  document.getElementById(\"clearBtn\").addEventListener(\"click\", clearTable);\n  document\n    .getElementById(\"templateBtn\")\n    .addEventListener(\"click\", openEmailTemplateModal);\n  document\n    .getElementById(\"downloadBtn\")\n    .addEventListener(\"click\", downloadData);\n  document\n    .getElementById(\"viewHistoryBtn\")\n    .addEventListener(\"click\", openEmailHistoryModal);\n  document\n    .getElementById(\"fileInput\")\n    .addEventListener(\"change\", handleFileImport);\n  document\n    .getElementById(\"closeModal\")\n    .addEventListener(\"click\", closeEmailTemplateModal);\n  document\n    .getElementById(\"cancelModalBtn\")\n    .addEventListener(\"click\", closeEmailTemplateModal);\n  document\n    .getElementById(\"saveTemplateBtn\")\n    .addEventListener(\"click\", saveEmailTemplate);\n  document\n    .getElementById(\"closeHistoryModal\")\n    .addEventListener(\"click\", closeEmailHistoryModal);\n  document\n    .getElementById(\"closeHistoryModalBtn\")\n    .addEventListener(\"click\", closeEmailHistoryModal);\n  document\n    .getElementById(\"refreshHistoryBtn\")\n    .addEventListener(\"click\", refreshEmailHistory);\n  document\n    .getElementById(\"historySearch\")\n    .addEventListener(\"input\", filterHistoryTable);\n  document\n    .getElementById(\"clearDatabaseBtn\")\n    .addEventListener(\"click\", clearDatabase);\n\n  // Enter key for search\n  document.getElementById(\"searchQuery\").addEventListener(\"keypress\", (e) => {\n    if (e.key === \"Enter\") runScraper();\n  });\n\n  // Company search filter\n  document\n    .getElementById(\"companySearch\")\n    .addEventListener(\"input\", filterTable);\n\n  // IPC event listeners\n  window.electronAPI.onScraperStatus((event, message) => {\n    document.getElementById(\"status\").innerText = `⏳ ${message}`;\n  });\n\n  window.electronAPI.onEstimatedTime((event, estimatedTimeMinutes) => {\n    estimatedTime = `${estimatedTimeMinutes} min remaining`;\n    document.getElementById(\n      \"status\"\n    ).innerText = `⏳ Scraping... ${estimatedTime}`;\n  });\n\n  window.electronAPI.onScraperProgress((event, progress) => {\n    processedCount++;\n    totalBusinesses = progress.total;\n\n    let elapsedTime = (Date.now() - startTime) / 1000;\n    let avgTimePerBusiness = elapsedTime / processedCount;\n    let timeRemaining = avgTimePerBusiness * (totalBusinesses - processedCount);\n\n    estimatedTime =\n      timeRemaining > 60\n        ? `${Math.ceil(timeRemaining / 60)} min remaining`\n        : `${Math.ceil(timeRemaining)} sec remaining`;\n\n    document.getElementById(\n      \"status\"\n    ).innerText = `⏳ Scraping... ${processedCount}/${totalBusinesses} completed. ${estimatedTime}`;\n  });\n\n  window.electronAPI.onScraperResults((event, data) => {\n    populateTable(data);\n    scrapingInProgress = false;\n    document.getElementById(\"status\").innerText = \"✅ Extraction complete!\";\n    updateSendEmailsButton();\n  });\n\n  window.electronAPI.onAuthSuccess((event, userInfo) => {\n    isLoggedIn = true;\n    userProfile = userInfo;\n    updateSendEmailsButton();\n    updateAuthUI();\n    document.getElementById(\n      \"status\"\n    ).innerText = `✅ Logged in as ${userInfo.name}`;\n  });\n\n  window.electronAPI.onAuthError((event, error) => {\n    isLoggedIn = false;\n    userProfile = null;\n    updateAuthUI();\n    document.getElementById(\n      \"status\"\n    ).innerText = `❌ Authentication failed: ${error}`;\n  });\n\n  window.electronAPI.onEmailProgress((event, progress) => {\n    // Calculate estimated time remaining\n    const emailsRemaining = progress.total - progress.sent;\n    const averageDelayPerEmail = 4; // seconds\n    const estimatedSecondsRemaining = emailsRemaining * averageDelayPerEmail;\n    const estimatedMinutesRemaining = Math.floor(\n      estimatedSecondsRemaining / 60\n    );\n    const estimatedSecondsRemainder = estimatedSecondsRemaining % 60;\n\n    let timeRemainingText = \"\";\n    if (estimatedMinutesRemaining > 0) {\n      timeRemainingText = ` - ~${estimatedMinutesRemaining}m ${estimatedSecondsRemainder}s remaining`;\n    } else if (estimatedSecondsRemaining > 0) {\n      timeRemainingText = ` - ~${estimatedSecondsRemaining}s remaining`;\n    }\n\n    document.getElementById(\n      \"status\"\n    ).innerText = `📧 Sending emails... ${progress.sent}/${progress.total} (${progress.current})${timeRemainingText}`;\n  });\n\n  window.electronAPI.onEmailStatus((event, message) => {\n    document.getElementById(\"status\").innerText = message;\n    emailSendingInProgress = false;\n    document.getElementById(\"sendEmailsBtn\").disabled = false;\n    updateSendEmailsButton();\n  });\n\n  window.electronAPI.onDownloadStatus((event, message) => {\n    document.getElementById(\"status\").innerText = message;\n  });\n}\n\nfunction updateSendEmailsButton() {\n  const sendBtn = document.getElementById(\"sendEmailsBtn\");\n  const hasData =\n    document.querySelectorAll(\"#resultsTable tbody tr\").length > 0;\n\n  // Only require login and data - email template is optional (has default)\n  sendBtn.disabled = !isLoggedIn || !hasData;\n}\n\nfunction runScraper() {\n  const query = document.getElementById(\"searchQuery\").value.trim();\n  if (!query) {\n    document.getElementById(\"status\").innerText =\n      \"⚠️ Please enter a search term!\";\n    return;\n  }\n\n  scrapingInProgress = true;\n  document.getElementById(\"status\").innerText =\n    \"⏳ Running scraper... Estimating time...\";\n\n  startTime = Date.now();\n  processedCount = 0;\n  estimatedTime = \"Calculating...\";\n\n  window.electronAPI.runScraper(query);\n}\n\nfunction cancelAllProcesses() {\n  let operationsCancelled = false;\n\n  if (scrapingInProgress) {\n    window.electronAPI.cancelScraper();\n    scrapingInProgress = false;\n    operationsCancelled = true;\n    document.getElementById(\"status\").innerText =\n      \"❌ Scraping cancelled by user\";\n  }\n\n  if (emailSendingInProgress) {\n    window.electronAPI.cancelEmails();\n    emailSendingInProgress = false;\n    document.getElementById(\"sendEmailsBtn\").disabled = false;\n    updateSendEmailsButton();\n    operationsCancelled = true;\n    document.getElementById(\"status\").innerText =\n      \"❌ Email sending cancelled by user\";\n  }\n\n  if (!operationsCancelled) {\n    document.getElementById(\"status\").innerText =\n      \"ℹ️ No active processes to cancel\";\n  }\n}\n\nfunction authenticateGoogle() {\n  if (isLoggedIn) {\n    logout();\n  } else {\n    window.electronAPI.googleAuth();\n  }\n}\n\nfunction logout() {\n  isLoggedIn = false;\n  userProfile = null;\n  updateSendEmailsButton();\n  updateAuthUI();\n}\n\nfunction updateAuthUI() {\n  const authBtn = document.getElementById(\"authBtn\");\n  const profilePic = document.getElementById(\"profilePic\");\n  const userName = document.getElementById(\"userName\");\n  const userEmail = document.getElementById(\"userEmail\");\n\n  if (isLoggedIn && userProfile) {\n    profilePic.textContent = userProfile.name\n      ? userProfile.name.charAt(0).toUpperCase()\n      : \"?\";\n    userName.textContent = userProfile.name || \"Unknown User\";\n    userEmail.textContent = userProfile.email || \"No email\";\n    authBtn.textContent = \"Logout\";\n  } else {\n    profilePic.textContent = \"?\";\n    userName.textContent = \"Not logged in\";\n    userEmail.textContent = \"Please authenticate\";\n    authBtn.textContent = \"Login\";\n  }\n}\n\nfunction toggleSelectAll() {\n  const selectAllCheckbox = document.getElementById(\"selectAll\");\n  const rowCheckboxes = document.querySelectorAll(\".row-checkbox\");\n\n  rowCheckboxes.forEach((checkbox) => {\n    checkbox.checked = selectAllCheckbox.checked;\n  });\n}\n\nfunction removeSelected() {\n  const rowCheckboxes = document.querySelectorAll(\".row-checkbox:checked\");\n  rowCheckboxes.forEach((checkbox) => {\n    checkbox.closest(\"tr\").remove();\n  });\n\n  document.getElementById(\"selectAll\").checked = false;\n  updateSendEmailsButton();\n}\n\nfunction filterTable() {\n  const filterValue = document\n    .getElementById(\"companySearch\")\n    .value.toLowerCase();\n  const rows = document.querySelectorAll(\"#resultsTable tbody tr\");\n\n  rows.forEach((row) => {\n    const companyName = row.cells[1].textContent.toLowerCase();\n    row.style.display = companyName.includes(filterValue) ? \"\" : \"none\";\n  });\n}\n\nfunction populateTable(data) {\n  const tableBody = document.querySelector(\"#resultsTable tbody\");\n  tableBody.innerHTML = \"\";\n\n  data.forEach((business) => {\n    const row = document.createElement(\"tr\");\n    row.innerHTML = `\n            <td class=\"checkbox-cell\"><input type=\"checkbox\" class=\"row-checkbox\"></td>\n            <td>${business.storeName || \"N/A\"}</td>\n            <td>${business.phone || \"No info\"}</td>\n            <td>${business.email || \"No info\"}</td>\n            <td>${business.address || \"No info\"}</td>\n            <td>${\n              business.bizWebsite\n                ? `<a href='${business.bizWebsite}' target='_blank'>Website</a>`\n                : \"No info\"\n            }</td>\n        `;\n    tableBody.appendChild(row);\n  });\n}\n\nfunction sendEmails() {\n  if (!isLoggedIn) {\n    alert(\"Please log in with your Google account first\");\n    return;\n  }\n\n  // Use default template if no custom template is set\n  let currentTemplate = emailTemplate.trim();\n  if (!currentTemplate) {\n    currentTemplate = `Good day, {companyName}!\n\nYour people are the most valuable asset. No company can enjoy continued success without a highly motivated and productive workforce.\n\nWe are a company committed to helping individuals secure their financial health. Financial security spells peace of mind and can prove to be your key to keeping your employees performing at their best, always.\n\nIn this light, we would like to request for a meeting with you via your preferred platform to propose a free financial planning seminar for your employees. In this program, we will share tips on protecting income and improving financial stability by promoting financial literacy for your employees and business.\n\nWe are looking forward to having the opportunity to enlighten your employees further on the benefits of financial planning. Be with them in their journey as they take charge of their future.\n\nSincerely yours,\n\nLydelyn Romero Quitong\nBlue Chalcedony Quartz\nLicensed insurance agent\nCertified Estate and Wealth Planner\nJunior Unit Manager`;\n  }\n\n  const rows = document.querySelectorAll(\"#resultsTable tbody tr\");\n  if (rows.length === 0) {\n    alert(\"No data available to send emails\");\n    return;\n  }\n\n  const selectedRows = document.querySelectorAll(\".row-checkbox:checked\");\n  const targetRows =\n    selectedRows.length > 0\n      ? selectedRows\n      : document.querySelectorAll(\".row-checkbox\");\n\n  const emailData = [];\n  targetRows.forEach((checkbox) => {\n    const row = checkbox.closest(\"tr\");\n    const cells = row.querySelectorAll(\"td\");\n    const email = cells[3].textContent.trim();\n\n    if (email && email !== \"No info\" && email !== \"Fetching...\") {\n      emailData.push({\n        companyName: cells[1].textContent.trim(),\n        phone: cells[2].textContent.trim(),\n        email: email,\n        address: cells[4].textContent.trim(),\n        website: cells[5].textContent.trim().replace(\"Website\", \"\"),\n      });\n    }\n  });\n\n  if (emailData.length === 0) {\n    alert(\"No valid email addresses found in selected rows\");\n    return;\n  }\n\n  // Calculate estimated time based on rate limiting (4 seconds average per email)\n  const averageDelayPerEmail = 4; // seconds (3-5 seconds random delay)\n  const estimatedTotalSeconds = emailData.length * averageDelayPerEmail;\n  const estimatedMinutes = Math.floor(estimatedTotalSeconds / 60);\n  const estimatedSecondsRemainder = estimatedTotalSeconds % 60;\n\n  let timeEstimateMessage = \"\";\n  if (estimatedMinutes > 0) {\n    timeEstimateMessage = `\\n\\nEstimated time: ${estimatedMinutes} minutes and ${estimatedSecondsRemainder} seconds`;\n  } else {\n    timeEstimateMessage = `\\n\\nEstimated time: ${estimatedTotalSeconds} seconds`;\n  }\n\n  if (\n    confirm(\n      `Send emails to ${emailData.length} recipients?${timeEstimateMessage}`\n    )\n  ) {\n    emailSendingInProgress = true;\n    document.getElementById(\"sendEmailsBtn\").disabled = true;\n\n    // Use session subject if available, otherwise use default\n    const emailSubject =\n      window.sessionEmailSubject ||\n      \"PRU LIFE UK FINANCIAL WELLNESS AND RETIREMENT PROGRAM PROPOSAL\";\n\n    emailData.forEach((data) => {\n      window.electronAPI.sendEmails({\n        emailData: [data],\n        template: currentTemplate,\n        subject: emailSubject,\n      });\n    });\n  }\n}\n\nfunction importFile() {\n  document.getElementById(\"fileInput\").click();\n}\n\nfunction handleFileImport(event) {\n  const file = event.target.files[0];\n  if (!file) return;\n\n  const reader = new FileReader();\n  reader.onload = function (e) {\n    try {\n      const data = new Uint8Array(e.target.result);\n      const workbook = XLSX.read(data, { type: \"array\" });\n      const firstSheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[firstSheetName];\n      const jsonData = XLSX.utils.sheet_to_json(worksheet);\n\n      populateTableFromImport(jsonData);\n      document.getElementById(\"statusMessage\").textContent =\n        \"✅ Data imported successfully!\";\n      updateSendEmailsButton();\n    } catch (error) {\n      alert(\"Error importing file: \" + error.message);\n    }\n  };\n  reader.readAsArrayBuffer(file);\n}\n\nfunction populateTableFromImport(data) {\n  const tableBody = document.querySelector(\"#resultsTable tbody\");\n  tableBody.innerHTML = \"\";\n\n  data.forEach((row) => {\n    const tr = document.createElement(\"tr\");\n    tr.innerHTML = `\n            <td class=\"checkbox-cell\"><input type=\"checkbox\" class=\"row-checkbox\"></td>\n            <td>${row[\"Company Name\"] || row.storeName || \"N/A\"}</td>\n            <td>${row[\"Phone Number\"] || row.phone || \"No info\"}</td>\n            <td>${row[\"Email Address\"] || row.email || \"No info\"}</td>\n            <td>${row[\"Company Address\"] || row.address || \"No info\"}</td>\n            <td>${\n              row[\"Business Website\"] || row.bizWebsite\n                ? `<a href='${\n                    row[\"Business Website\"] || row.bizWebsite\n                  }' target='_blank'>Website</a>`\n                : \"No info\"\n            }</td>\n        `;\n    tableBody.appendChild(tr);\n  });\n}\n\nfunction clearTable() {\n  if (confirm(\"Are you sure you want to clear all table data?\")) {\n    document.querySelector(\"#resultsTable tbody\").innerHTML = \"\";\n    document.getElementById(\"selectAll\").checked = false;\n    updateSendEmailsButton();\n  }\n}\n\nfunction openEmailTemplateModal() {\n  document.getElementById(\"emailTemplateModal\").style.display = \"block\";\n  document.getElementById(\"emailTemplateText\").value = emailTemplate;\n\n  // Add input for email subject\n  const subjectInput = document.createElement(\"input\");\n  subjectInput.type = \"text\";\n  subjectInput.id = \"emailSubject\";\n  subjectInput.placeholder = \"Enter email subject\";\n  subjectInput.style.width = \"100%\";\n  subjectInput.style.marginBottom = \"10px\";\n  subjectInput.value = localStorage.getItem(\"emailSubject\") || \"\"; // Load saved subject\n  document\n    .getElementById(\"emailTemplateModal\")\n    .insertBefore(subjectInput, document.getElementById(\"emailTemplateText\"));\n\n  // Add input for image upload\n  const imageInput = document.createElement(\"input\");\n  imageInput.type = \"file\";\n  imageInput.id = \"imageUpload\";\n  imageInput.accept = \"image/*\";\n  document.getElementById(\"emailTemplateModal\").appendChild(imageInput);\n\n  // Event listener for image upload\n  imageInput.addEventListener(\"change\", function (event) {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = function (e) {\n        localStorage.setItem(\"emailFooterImage\", e.target.result); // Save image data as base64\n      };\n      reader.readAsDataURL(file);\n    }\n  });\n\n  // Set default email content if empty (without subject in body)\n  if (!document.getElementById(\"emailTemplateText\").value) {\n    document.getElementById(\n      \"emailTemplateText\"\n    ).value = `Good day, {companyName}!\n\nYour people are the most valuable asset. No company can enjoy continued success without a highly motivated and productive workforce.\n\nWe are a company committed to helping individuals secure their financial health. Financial security spells peace of mind and can prove to be your key to keeping your employees performing at their best, always.\n\nIn this light, we would like to request for a meeting with you via your preferred platform to propose a free financial planning seminar for your employees. In this program, we will share tips on protecting income and improving financial stability by promoting financial literacy for your employees and business.\n\nWe are looking forward to having the opportunity to enlighten your employees further on the benefits of financial planning. Be with them in their journey as they take charge of their future.\n\nSincerely yours,\n\nLydelyn Romero Quitong\nBlue Chalcedony Quartz\nLicensed insurance agent\nCertified Estate and Wealth Planner\nJunior Unit Manager`;\n  }\n\n  // Load saved subject\n  const savedSubject =\n    localStorage.getItem(\"emailSubject\") ||\n    \"PRU LIFE UK FINANCIAL WELLNESS AND RETIREMENT PROGRAM PROPOSAL\";\n  document.getElementById(\"emailSubject\").value = savedSubject;\n}\n\nfunction closeEmailTemplateModal() {\n  document.getElementById(\"emailTemplateModal\").style.display = \"none\";\n}\n\nfunction saveEmailTemplate() {\n  // Save template for current session only - do not persist\n  emailTemplate = document.getElementById(\"emailTemplateText\").value;\n  \n  // Store subject in session variable (not localStorage)\n  const emailSubject = document.getElementById(\"emailSubject\").value;\n  window.sessionEmailSubject = emailSubject;\n\n  closeEmailTemplateModal();\n  updateSendEmailsButton();\n  alert(\"Email template updated for current session only!\");\n}\n\nfunction loadEmailTemplate() {\n  // Always load default template on startup - ignore any saved customizations\n  console.log(\"Loading default email template on startup\");\n  \n  // Clear any persistent storage to ensure fresh start\n  localStorage.removeItem(\"emailTemplate\");\n  localStorage.removeItem(\"emailSubject\");\n  \n  // Always use the default template\n  emailTemplate = `Good day, {companyName}!\n\nYour people are the most valuable asset. No company can enjoy continued success without a highly motivated and productive workforce.\n\nWe are a company committed to helping individuals secure their financial health. Financial security spells peace of mind and can prove to be your key to keeping your employees performing at their best, always.\n\nIn this light, we would like to request for a meeting with you via your preferred platform to propose a free financial planning seminar for your employees. In this program, we will share tips on protecting income and improving financial stability by promoting financial literacy for your employees and business.\n\nWe are looking forward to having the opportunity to enlighten your employees further on the benefits of financial planning. Be with them in their journey as they take charge of their future.\n\nSincerely yours,\n\nLydelyn Romero Quitong\nBlue Chalcedony Quartz\nLicensed insurance agent\nCertified Estate and Wealth Planner\nJunior Unit Manager`;\n}\n\nfunction downloadData() {\n  const rows = document.querySelectorAll(\"#resultsTable tbody tr\");\n  if (rows.length === 0) {\n    alert(\"No data available to download\");\n    return;\n  }\n\n  const data = [];\n  rows.forEach((row) => {\n    const cells = row.querySelectorAll(\"td\");\n    data.push({\n      \"Company Name\": cells[1].innerText.trim(),\n      \"Phone Number\": cells[2].innerText.trim(),\n      \"Email Address\": cells[3].innerText.trim(),\n      \"Company Address\": cells[4].innerText.trim(),\n      \"Business Website\": cells[5].innerText.trim(),\n    });\n  });\n\n  window.electronAPI.downloadExcel(data);\n}\n\n// Email History Functions\nasync function openEmailHistoryModal() {\n  document.getElementById(\"emailHistoryModal\").style.display = \"block\";\n  await loadEmailHistory();\n}\n\nfunction closeEmailHistoryModal() {\n  document.getElementById(\"emailHistoryModal\").style.display = \"none\";\n}\n\nasync function loadEmailHistory() {\n  try {\n    const sentEmails = await window.electronAPI.getSentEmails();\n    populateHistoryTable(sentEmails);\n  } catch (error) {\n    console.error(\"Error loading email history:\", error);\n    alert(\"Error loading email history\");\n  }\n}\n\nfunction populateHistoryTable(sentEmails) {\n  const tableBody = document.getElementById(\"historyTableBody\");\n  tableBody.innerHTML = \"\";\n\n  if (sentEmails.length === 0) {\n    tableBody.innerHTML =\n      '<tr><td colspan=\"6\" style=\"text-align: center; padding: 20px;\">No emails sent yet</td></tr>';\n    return;\n  }\n\n  sentEmails.forEach((email) => {\n    const row = document.createElement(\"tr\");\n    const sentDate = new Date(email.sent_date).toLocaleString();\n\n    row.innerHTML = `\n            <td style=\"padding: 8px; border: 1px solid #ddd;\">${\n              email.company_name || \"N/A\"\n            }</td>\n            <td style=\"padding: 8px; border: 1px solid #ddd;\">${\n              email.email_address\n            }</td>\n            <td style=\"padding: 8px; border: 1px solid #ddd;\">${\n              email.phone_number || \"N/A\"\n            }</td>\n            <td style=\"padding: 8px; border: 1px solid #ddd;\">${sentDate}</td>\n            <td style=\"padding: 8px; border: 1px solid #ddd; max-width: 200px; overflow: hidden; text-overflow: ellipsis;\" title=\"${\n              email.email_subject || \"N/A\"\n            }\">${email.email_subject || \"N/A\"}</td>\n            <td style=\"padding: 8px; border: 1px solid #ddd;\">\n                <button class=\"delete-history-btn\" onclick=\"deleteHistoryRecord(${\n                  email.id\n                })\" style=\"background: #ff4444; color: white; border: none; padding: 4px 8px; border-radius: 3px; cursor: pointer;\">Delete</button>\n            </td>\n        `;\n    tableBody.appendChild(row);\n  });\n}\n\nasync function deleteHistoryRecord(id) {\n  if (confirm(\"Are you sure you want to delete this email record?\")) {\n    try {\n      await window.electronAPI.deleteEmailRecord(id);\n      await loadEmailHistory(); // Refresh the table\n    } catch (error) {\n      console.error(\"Error deleting email record:\", error);\n      alert(\"Error deleting email record\");\n    }\n  }\n}\n\nasync function refreshEmailHistory() {\n  await loadEmailHistory();\n}\n\nfunction filterHistoryTable() {\n  const filterValue = document\n    .getElementById(\"historySearch\")\n    .value.toLowerCase();\n  const rows = document.querySelectorAll(\"#historyTable tbody tr\");\n\n  rows.forEach((row) => {\n    if (row.children.length > 1) {\n      // Skip \"no data\" row\n      const companyName = row.children[0].textContent.toLowerCase();\n      const email = row.children[1].textContent.toLowerCase();\n      row.style.display =\n        companyName.includes(filterValue) || email.includes(filterValue)\n          ? \"\"\n          : \"none\";\n    }\n  });\n}\n\nasync function clearDatabase() {\n  if (\n    confirm(\n      \"Are you sure you want to clear ALL email history? This action cannot be undone!\"\n    )\n  ) {\n    if (\n      confirm(\n        \"This will permanently delete all sent email records. Are you absolutely sure?\"\n      )\n    ) {\n      try {\n        await window.electronAPI.clearAllEmailHistory();\n        await loadEmailHistory(); // Refresh the table\n        alert(\"Email history database cleared successfully!\");\n      } catch (error) {\n        console.error(\"Error clearing database:\", error);\n        alert(\"Error clearing database: \" + error.message);\n      }\n    }\n  }\n}\n\n// Enhanced populateTable to mark already emailed companies\nasync function populateTable(data) {\n  const tableBody = document.querySelector(\"#resultsTable tbody\");\n  tableBody.innerHTML = \"\";\n\n  for (const business of data) {\n    const row = document.createElement(\"tr\");\n\n    // Check if email was already sent\n    let isAlreadySent = false;\n    if (\n      business.email &&\n      business.email !== \"No info\" &&\n      business.email !== \"Fetching...\"\n    ) {\n      try {\n        isAlreadySent = await window.electronAPI.checkEmailSent(business.email);\n      } catch (error) {\n        console.error(\"Error checking email status:\", error);\n      }\n    }\n\n    // Add visual indicator for already sent emails\n    const sentIndicator = isAlreadySent ? \" ✅\" : \"\";\n    const rowClass = isAlreadySent ? 'style=\"background-color: #e8f5e8;\"' : \"\";\n\n    row.innerHTML = `\n            <td class=\"checkbox-cell\"><input type=\"checkbox\" class=\"row-checkbox\" ${\n              isAlreadySent ? \"disabled\" : \"\"\n            }></td>\n            <td>${business.storeName || \"N/A\"}${sentIndicator}</td>\n            <td>${business.phone || \"No info\"}</td>\n            <td>${business.email || \"No info\"}</td>\n            <td>${business.address || \"No info\"}</td>\n            <td>${\n              business.bizWebsite\n                ? `<a href='${business.bizWebsite}' target='_blank'>Website</a>`\n                : \"No info\"\n            }</td>\n        `;\n\n    if (isAlreadySent) {\n      row.setAttribute(\"style\", \"background-color: #e8f5e8;\");\n      row.setAttribute(\"title\", \"Email already sent to this company\");\n    }\n\n    tableBody.appendChild(row);\n  }\n}\n\nwindow.addEventListener(\"load\", initializeApp);\n","size_bytes":26397},"replit.md":{"content":"# Overview\n\nThis is an Electron-based desktop application designed for business lead generation and email marketing automation. The application scrapes business information from online sources, manages contact lists, and sends automated emails using Gmail integration. It features a GUI for managing the scraping process, email templates, and authentication with Google services.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Desktop Application Framework\n- **Electron**: Cross-platform desktop application using web technologies (HTML, CSS, JavaScript)\n- **Main Process**: Handles application lifecycle and native OS interactions\n- **Renderer Process**: Manages the user interface and business logic\n\n## Data Processing\n- **Excel Integration**: Uses XLSX library for reading and writing spreadsheet files\n- **Business Data Scraping**: Automated extraction of business information from web sources\n- **Progress Tracking**: Real-time monitoring of scraping operations with time estimation\n\n## Email System\n- **Gmail API Integration**: Direct integration with Google's email services\n- **Template Management**: Dynamic email template system with variable substitution\n- **Bulk Email Processing**: Automated sending of personalized emails to scraped business contacts\n- **Authentication**: OAuth2 flow for secure Google account access\n\n## User Interface Components\n- **Progress Indicators**: Real-time feedback for scraping and email operations\n- **Template Editor**: Built-in email template customization\n- **Authentication Panel**: Google account login/logout management\n- **Control Buttons**: Start/stop operations for scraping and email sending\n\n## Session Management\n- **Template Storage**: In-memory email template storage during application session\n- **User State**: Persistent authentication state and user profile information\n- **Process Control**: Enhanced cancellation system with immediate timeout clearing\n- **Email Process Safety**: Multiple layers of protection against stuck email processes\n\n# Recent Changes\n\n## Email Process Cancellation Fix (Latest)\n- **CRITICAL FIX**: Implemented proper email sending cancellation\n- Added timeout tracking system to cancel all scheduled email delays\n- Fixed issue where emails continued sending after app closure or cancel button\n- Enhanced cancel button to immediately stop all email operations\n- Added multiple safety layers: beforeunload, window-close, and app-quit events\n- Now properly clears Gmail API requests and scheduled timeouts\n\n## Email Template Storage Fix\n- Modified template storage to use sessionStorage instead of localStorage\n- Email templates now revert to default on app startup as requested\n- Custom templates are preserved only during the current session\n\n## Email Collection Enhancement\n- Upgraded email scraping from ~30-40% to ~70-85% success rate\n- Added multiple email extraction patterns including obfuscated formats\n- Implemented contact page deep-diving (5 pages per business)\n- Added smart email validation and business-relevant prioritization\n- Enhanced retry mechanisms and fallback email generation\n\n# External Dependencies\n\n## Core Dependencies\n- **Electron (v37.4.0)**: Desktop application framework for cross-platform compatibility\n- **XLSX (v0.18.5)**: Excel file processing for importing/exporting business data\n\n## Google Services\n- **Gmail API**: For sending automated emails through user's Gmail account\n- **Google OAuth2**: For secure authentication and authorization\n\n## Web Scraping Infrastructure\n- Automated business information extraction from online directories\n- Real-time progress tracking and time estimation algorithms\n\n## File System\n- Local storage for temporary data processing\n- Excel file import/export capabilities for business contact management","size_bytes":3817},"style.css":{"content":"* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: Arial, sans-serif;\n}\n\nbody {\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    overflow: hidden;\n    position: relative;\n    padding-top: 50px;\n    background-image: url(\"src/img/bg9.png\");\n    background-repeat: no-repeat;\n    background-size: cover;\n    background-position: center;\n    background-attachment: fixed;\n    color: white;\n}\n\n.background-animation {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    background: radial-gradient(circle, rgba(255, 215, 0, 0.2) 10%, transparent 70%);\n    animation: glowing 5s infinite alternate;\n}\n\n@keyframes glowing {\n    0% { filter: blur(5px); opacity: 0.6; }\n    100% { filter: blur(10px); opacity: 1; }\n}\n\n.border-frame {\n    position: absolute;\n    top: 2%;\n    left: 2%;\n    width: 96%;\n    height: 96%;\n    border: 3px solid gold;\n    pointer-events: none;\n    box-shadow: 0 0 10px gold, 0 0 20px rgba(255, 215, 0, 0.7), 0 0 30px rgba(255, 215, 0, 0.5);\n    animation: glow 1.5s infinite alternate;\n}\n\n@keyframes glow {\n    0% {\n        box-shadow: 0 0 10px gold, 0 0 20px rgba(255, 215, 0, 0.7), 0 0 30px rgba(255, 215, 0, 0.5);\n    }\n    100% {\n        box-shadow: 0 0 15px gold, 0 0 25px rgba(255, 215, 0, 0.9), 0 0 35px rgba(255, 215, 0, 0.7);\n    }\n}\n\n.search-container {\n    width: 90%;\n    max-width: 800px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    margin-bottom: 5px; /* Decreased from 20px to 5px */\n    position: relative;\n    z-index: 1000; /* Ensure the search bar is always on top */\n    top: -25px; /* Move upwards by 25px */\n}\n\n.search-bar {\n    width: 100%;\n    max-width: 600px;\n    display: flex;\n    align-items: center;\n    border: 2px solid #FFD700;\n    border-radius: 50px;\n    padding: 10px 20px;\n    background-color: black;\n    box-shadow: 0 4px 10px rgba(218, 165, 32, 0.5);\n    position: relative;\n}\n.custom-button {\n    background-color: black;\n    color: gold;\n    border: gold 1px solid;\n    padding: 10px 20px;\n    font-size: 16px;\n    font-weight: bold;\n    cursor: pointer;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: 5px;\n    border-radius: 5px;\n    width: auto;\n    box-shadow: 0 4px 10px rgba(218, 165, 32, 0.5);\n  }\n\n  .custom-button:hover {\n    background-color: gold;\n    color: black;\n    border: gold 1px solid;\n    padding: 10px 20px;\n    font-size: 16px;\n    font-weight: bold;\n    cursor: pointer;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: 5px;\n    border-radius: 5px;\n    width: auto;\n    box-shadow: 0 4px 10px rgba(218, 165, 32, 0.5);\n  }\n\n.search-bar input {\n    flex: 1;\n    border: none;\n    outline: none;\n    background: transparent;\n    font-size: 18px;\n    color: white;\n    padding-right: 40px;\n    pointer-events: auto; /* Ensure input is clickable */\n}\n\n.search-bar input::placeholder {\n    color: rgba(255, 255, 255, 0.7);\n}\n\n.search-icon {\n    position: absolute;\n    right: 15px;\n    font-size: 20px;\n    color: gold;\n    cursor: pointer;\n}\n\n.table-container {\n    width: 90%;\n    max-width: 90%;\n    height: 70%;\n    overflow-y: auto;\n    overflow-x: auto;\n    border: 2px solid gold;\n    background-color: rgba(0, 0, 0, 0.6);\n    position: relative;\n    z-index: 10;\n    margin-top: 0px !important; /* Remove extra space above table */\n}\n\ntable {\n    width: 100%;\n    border-collapse: collapse;\n    margin-top: 20px;\n    background: transparent;\n    border-radius: 10px;\n    overflow: hidden;\n}\n\nth, td {\n    border: 1px solid gold;\n    padding: 10px;\n    text-align: left;\n    color: white;\n}\n\nth {\n    background-color: transparent;\n    color: white;\n    font-weight: bold;\n    border-bottom: 2px solid gold;\n}\n.button-container{\n    margin-top: 20px;\n}\n\n.btn {\n    background-color: black;\n    color: gold;\n    border: gold 1px solid;\n    padding: 10px 20px;\n    font-size: 16px;\n    font-weight: bold;\n    cursor: pointer;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: 5px;\n    border-radius: 5px;\n    width: auto;\n    box-shadow: 0 4px 10px rgba(218, 165, 32, 0.5);\n}\n\n.btn:disabled {\n    background-color: grey;\n    cursor: not-allowed;\n}\n\n.btn:hover:not(:disabled) {\n    background-color: yellow;\n}\n\n.btn:enabled {\n    background-color: black;\n    color: gold;\n    cursor: pointer;\n}\n\n.btn:enabled:hover {\n    background-color: gold;\n    color: black;\n}\n\n#importIcon {\n    font-size: 24px;\n    color: gold;\n    cursor: pointer;\n    margin-top: 10px;\n    padding: 10px;\n    border: 2px solid gold;\n    border-radius: 50%;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    background-color: black;\n    box-shadow: 0 4px 10px rgba(218, 165, 32, 0.5);\n}\n\n#importIcon:hover {\n    background-color: gold;\n    color: black;\n}\n\n.centered-section {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    text-align: center;\n    background-color: rgba(0, 0, 0, 0.6);\n    padding: 30px 40px;\n    border-radius: 10px;\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);\n    color: white;   \n}\n\n.centered-section h1 {    \n    font-size: 4rem; /* Increase font size */\n    font-family: 'Playfair Display'; /* Elegant and classy font */\n    font-weight: 700;\n    text-align: center;\n    color: #ffffff;\n    text-shadow: 0 0 5px gold, 0 0 10px gold, 0 0 10px gold;\n    /* animation: glow 2s infinite alternate; */\n}\n\n.centered-section h1 .highlight {\n    color: rgb(236, 212, 71);\n    font-family: 'Playfair Display';\n\n}\n\n/* @keyframes glow {\n    0% {\n        text-shadow: 0 0 10px gold, 0 0 20px gold, 0 0 30px gold;\n    }\n    100% {\n        text-shadow: 0 0 20px gold, 0 0 30px gold, 0 0 40px gold;\n    }\n} */\n\n#googleAuthBtn {\n    background-color: #4285F4; /* Google blue */\n    color: white;\n    border: none;\n    padding: 10px 20px;\n    font-size: 14px;\n    font-weight: bold;\n    cursor: pointer;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n    border-radius: 5px;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    transition: background-color 0.3s ease;\n}\n\n#googleAuthBtn:hover {\n    background-color: #357AE8; /* Darker Google blue */\n}\n\n#googleAuthBtn img {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n}\n\n#importFileBtn {\n    background-color: black;\n    color: gold;\n    border: gold 1px solid;\n    padding: 10px 20px;\n    font-size: 16px;\n    font-weight: bold;\n    cursor: pointer;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: 5px;\n    border-radius: 5px;\n    box-shadow: 0 4px 10px rgba(218, 165, 32, 0.5);\n    transition: background-color 0.3s ease, color 0.3s ease;\n}\n\n#importFileBtn:hover {\n    background-color: yellow;\n}\n.user-profile {\n    display: flex;\n    align-items: center;\n    /* background-color: #f5f5f5; */\n    padding: 10px;\n    border-radius: 10px;\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n}\n\n.user-profile img {\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    margin-right: 10px;\n}\n\n.user-profile .user-info {\n    display: flex;\n    flex-direction: column;\n}\n\n.user-profile .user-info .name {\n    font-size: 16px;\n    font-weight: bold;\n    color: white;\n}\n\n.user-profile .user-info .email {\n    font-size: 12px;\n    color: whitesmoke;\n}\n\n#googleAuthBtn {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: black;\n    color: gold;\n    border: 1px solid gold;\n    border-radius: 5px;\n    padding: 10px 20px;\n    font-size: 16px;\n    font-weight: bold;\n    cursor: pointer;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n    transition: background-color 0.3s ease, color 0.3s ease;\n}\n\n#googleAuthBtn:hover {\n    background-color: gold;\n    color: black;\n}\n\n#googleAuthBtn img {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    margin-right: 10px;\n}\n\n#logoutBtn {\n    display: inline-block;\n    background-color: black;\n    color: gold;\n    border: 2px solid gold;\n    border-radius: 5px;\n    padding: 10px 15px;\n    font-size: 14px;\n    font-weight: bold;\n    cursor: pointer;\n    margin-left: 10px;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n    transition: background-color 0.3s ease, color 0.3s ease;\n}\n\n#logoutBtn:hover {\n    background-color: gold;\n    color: black;\n}\n\n#importFileBtn {\n    background-color: black;\n    color: gold;\n    border: gold 1px solid;\n    padding: 10px 20px;\n    font-size: 16px;\n    font-weight: bold;\n    cursor: pointer;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: 5px;\n    border-radius: 5px;\n    box-shadow: 0 4px 10px rgba(218, 165, 32, 0.5);\n    transition: background-color 0.3s ease, color 0.3s ease;\n}\n\n#importFileBtn:hover {\n    background-color: gold;\n    color: black;\n}\n\n#userProfile {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 40px; /* Match the height of the Google sign-in button */\n}\n\n#sendEmailsBtn:enabled {\n    background-color: black;\n    border: 1px solid gold;\n    color: gold;\n    cursor: pointer;\n}\n\n/* Updated progress bar styles to match the second picture */\n#progressBarContainer {\n    display: none;\n    width: 100%;\n    background: #ddd;\n    border-radius: 25px;\n    overflow: hidden;\n    margin-top: 10px;\n    position: relative;\n    height: 30px;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n#progressBar {\n    height: 100%;\n    background: linear-gradient(to right, gold, black);\n    width: 0%;\n    border-radius: 25px;\n    transition: width 0.5s;\n}\n\n#progressBarContainer::after {\n    content: \"loading...\";\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    font-size: 16px;\n    color: black;\n    font-weight: bold;\n}\n\n#cancelButton {\n    position: absolute;\n    right: 10px;\n    top: 2px;\n    background: red;\n    color: white;\n    border: none;\n    border-radius: 5px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n\n/* From Uiverse.io by andrew-demchenk0 */ \n.button {\n    position: relative;\n    width: 150px;\n    height: 40px;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    border: 1px solid red ;\n    background-color: red;\n  }\n\n  .button, .button__icon, .button__text {\n    transition: all 0.3s;\n  }\n\n  .button .button__text {\n    transform: translateX(30px);\n    color: #fff;\n    font-weight: 600;\n  }\n\n  .button .button__icon {\n    position: absolute;\n    transform: translateX(109px);\n    height: 100%;\n    width: 39px;\n    background-color: red;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .button .svg {\n    width: 30px;\n    stroke: #fff;\n  }\n\n  .button:hover {\n    background: red;\n  }\n\n  .button:hover .button__text {\n    color: transparent;\n  }\n\n  .button:hover .button__icon {\n    width: 148px;\n    transform: translateX(0);\n  }\n\n  .button:active .button__icon {\n    background-color: black;\n  }\n\n  .button:active {\n    border: 1px solid black;\n  }\n\n/* Email History Styles */\n.history-btn {\n    background: linear-gradient(45deg, #9b59b6, #8e44ad);\n}\n\n.history-btn:hover {\n    background: linear-gradient(45deg, #8e44ad, #7d3c98);\n}\n\n.history-table-container {\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    overflow: hidden;\n}\n\n#historyTable {\n    font-size: 14px;\n}\n\n#historyTable th {\n    background-color: #f8f9fa !important;\n    font-weight: bold;\n    position: sticky;\n    top: 0;\n    z-index: 10;\n}\n\n#historyTable tr:nth-child(even) {\n    background-color: #f9f9f9;\n}\n\n#historyTable tr:hover {\n    background-color: #e3f2fd;\n}\n\n.delete-history-btn:hover {\n    background: #cc3333 !important;\n}\n\n/* Already sent email indicator */\n.row-checkbox:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n}","size_bytes":11900}},"version":1}